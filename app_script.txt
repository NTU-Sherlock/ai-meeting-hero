{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green80\blue85;\red246\green247\blue249;\red46\green49\blue51;
\red20\green67\blue174;\red186\green6\blue115;\red162\green0\blue16;\red24\green25\blue27;\red18\green115\blue126;
}
{\*\expandedcolortbl;;\cssrgb\c37255\c38824\c40784;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c9412\c35294\c73725;\cssrgb\c78824\c15294\c52549;\cssrgb\c70196\c7843\c7059;\cssrgb\c12549\c12941\c14118;\cssrgb\c3529\c52157\c56863;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Version 4.0 - Final (Includes version check and robust add/update logic)\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 SPREADSHEET_ID\cf4 \strokec4  = \cf7 \strokec7 "1MJBvgdyZxAEkvSDL0Pyoc1GjEzFYjxdVUy5lJN_imwI"\cf4 \strokec4 ; \cb1 \
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 SHEET_NAME\cf4 \strokec4  = \cf7 \strokec7 "Prompts"\cf4 \strokec4 ; \cb1 \
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 SCRIPT_VERSION\cf4 \strokec4  = \cf7 \strokec7 "4.0"\cf4 \strokec4 ; \cf2 \strokec2 // \uc0\u36889 \u26159 \u26368 \u26032 \u30340 \u29256 \u26412 \u34399 \cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 sheet\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf8 \strokec8 openById\cf4 \strokec4 (\cf6 \strokec6 SPREADSHEET_ID\cf4 \strokec4 ).\cf8 \strokec8 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEET_NAME\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // \uc0\u34389 \u29702  CORS \u38928 \u27298 \u35531 \u27714 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 doOptions\cf4 \strokec4 (\cf8 \strokec8 e\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 ContentService\cf4 \strokec4 .\cf8 \strokec8 createTextOutput\cf4 \strokec4 ()\cb1 \
\cb3     .\cf8 \strokec8 withHeaders\cf4 \strokec4 (\{\cb1 \
\cb3       \cf7 \strokec7 'Access-Control-Allow-Origin'\cf4 \strokec4 : \cf7 \strokec7 '*'\cf4 \strokec4 ,\cb1 \
\cb3       \cf7 \strokec7 'Access-Control-Allow-Methods'\cf4 \strokec4 : \cf7 \strokec7 'GET, POST, OPTIONS'\cf4 \strokec4 ,\cb1 \
\cb3       \cf7 \strokec7 'Access-Control-Allow-Headers'\cf4 \strokec4 : \cf7 \strokec7 'Content-Type'\cf4 \cb1 \strokec4 \
\cb3     \});\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // \uc0\u32113 \u19968 \u30340  JSON \u22238 \u25033 \u34389 \u29702 \u20989 \u24335 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 createJsonResponse\cf4 \strokec4 (\cf8 \strokec8 data\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 ContentService\cf4 \cb1 \strokec4 \
\cb3     .\cf8 \strokec8 createTextOutput\cf4 \strokec4 (\cf6 \strokec6 JSON\cf4 \strokec4 .\cf8 \strokec8 stringify\cf4 \strokec4 (\cf8 \strokec8 data\cf4 \strokec4 ))\cb1 \
\cb3     .\cf8 \strokec8 setMimeType\cf4 \strokec4 (\cf6 \strokec6 ContentService\cf4 \strokec4 .\cf6 \strokec6 MimeType\cf4 \strokec4 .\cf6 \strokec6 JSON\cf4 \strokec4 )\cb1 \
\cb3     .\cf8 \strokec8 withHeaders\cf4 \strokec4 (\{\cb1 \
\cb3       \cf7 \strokec7 'Access-Control-Allow-Origin'\cf4 \strokec4 : \cf7 \strokec7 '*'\cf4 \cb1 \strokec4 \
\cb3     \});\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // \uc0\u34389 \u29702  GET \u35531 \u27714  (\u21462 \u24471 \u25152 \u26377  Prompts \u25110 \u27298 \u26597 \u29256 \u26412 )\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 doGet\cf4 \strokec4 (\cf8 \strokec8 e\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf2 \strokec2 // New feature: Version Check\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf8 \strokec8 e\cf4 \strokec4 .\cf8 \strokec8 parameter\cf4 \strokec4 .\cf8 \strokec8 action\cf4 \strokec4  === \cf7 \strokec7 'getVersion'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 createJsonResponse\cf4 \strokec4 (\{ \cf8 \strokec8 status\cf4 \strokec4 : \cf7 \strokec7 'success'\cf4 \strokec4 , \cf8 \strokec8 version\cf4 \strokec4 : \cf6 \strokec6 SCRIPT_VERSION\cf4 \strokec4  \});\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4  = \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getDataRange\cf4 \strokec4 ().\cf8 \strokec8 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4  = \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 shift\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 prompts\cf4 \strokec4  = \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 map\cf4 \strokec4 (\cf8 \strokec8 row\cf4 \strokec4  => \{\cb1 \
\cb3       \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 prompt\cf4 \strokec4  = \{\};\cb1 \
\cb3       \cf8 \strokec8 headers\cf4 \strokec4 .\cf8 \strokec8 forEach\cf4 \strokec4 ((\cf8 \strokec8 header\cf4 \strokec4 , \cf8 \strokec8 index\cf4 \strokec4 ) => \{\cb1 \
\cb3         \cf8 \strokec8 prompt\cf4 \strokec4 [\cf8 \strokec8 header\cf4 \strokec4 .\cf8 \strokec8 trim\cf4 \strokec4 ()] = \cf8 \strokec8 row\cf4 \strokec4 [\cf8 \strokec8 index\cf4 \strokec4 ];\cb1 \
\cb3       \});\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 prompt\cf4 \strokec4 ;\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 createJsonResponse\cf4 \strokec4 (\cf8 \strokec8 prompts\cf4 \strokec4 );\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf8 \strokec8 error\cf4 \strokec4 ) \{\cb1 \
\cb3      \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 createJsonResponse\cf4 \strokec4 (\{ \cf8 \strokec8 status\cf4 \strokec4 : \cf7 \strokec7 'error'\cf4 \strokec4 , \cf8 \strokec8 message\cf4 \strokec4 : \cf7 \strokec7 `doGet Error: \cf4 \strokec4 $\{\cf8 \strokec8 error\cf4 \strokec4 .\cf8 \strokec8 message\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4  \});\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // \uc0\u34389 \u29702  POST \u35531 \u27714  (\u26032 \u22686  Prompt \u25110 \u26356 \u26032 \u35336 \u25976 )\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 doPost\cf4 \strokec4 (\cf8 \strokec8 e\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 response\cf4 \strokec4 ;\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 lock\cf4 \strokec4  = \cf6 \strokec6 LockService\cf4 \strokec4 .\cf8 \strokec8 getScriptLock\cf4 \strokec4 ();\cb1 \
\cb3   \cf8 \strokec8 lock\cf4 \strokec4 .\cf8 \strokec8 waitLock\cf4 \strokec4 (\cf9 \strokec9 30000\cf4 \strokec4 ); \cf2 \strokec2 // \uc0\u31561 \u24453 \u26368 \u22810  30 \u31186 \cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 request\cf4 \strokec4  = \cf6 \strokec6 JSON\cf4 \strokec4 .\cf8 \strokec8 parse\cf4 \strokec4 (\cf8 \strokec8 e\cf4 \strokec4 .\cf8 \strokec8 postData\cf4 \strokec4 .\cf8 \strokec8 contents\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf8 \strokec8 request\cf4 \strokec4 .\cf8 \strokec8 action\cf4 \strokec4 ) \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf7 \strokec7 "\uc0\u35531 \u27714 \u20013 \u32570 \u23569  'action' \u21443 \u25976 \u12290 "\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 switch\cf4 \strokec4 (\cf8 \strokec8 request\cf4 \strokec4 .\cf8 \strokec8 action\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 case\cf4 \strokec4  \cf7 \strokec7 'addPrompt'\cf4 \strokec4 :\cb1 \
\cb3         \cf8 \strokec8 response\cf4 \strokec4  = \cf8 \strokec8 addPrompt\cf4 \strokec4 (\cf8 \strokec8 request\cf4 \strokec4 .\cf8 \strokec8 data\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 case\cf4 \strokec4  \cf7 \strokec7 'incrementCopyCount'\cf4 \strokec4 :\cb1 \
\cb3         \cf8 \strokec8 response\cf4 \strokec4  = \cf8 \strokec8 incrementCopyCount\cf4 \strokec4 (\cf8 \strokec8 request\cf4 \strokec4 .\cf8 \strokec8 id\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 default\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf7 \strokec7 `\uc0\u26410 \u30693 \u30340 \u25805 \u20316 \u35531 \u27714 : \cf4 \strokec4 $\{\cf8 \strokec8 request\cf4 \strokec4 .\cf8 \strokec8 action\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf8 \strokec8 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 response\cf4 \strokec4  = \{ \cf8 \strokec8 status\cf4 \strokec4 : \cf7 \strokec7 'error'\cf4 \strokec4 , \cf8 \strokec8 message\cf4 \strokec4 : \cf7 \strokec7 `doPost Error: \cf4 \strokec4 $\{\cf8 \strokec8 error\cf4 \strokec4 .\cf8 \strokec8 message\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4  \};\cb1 \
\cb3   \} \cf5 \strokec5 finally\cf4 \strokec4  \{\cb1 \
\cb3     \cf8 \strokec8 lock\cf4 \strokec4 .\cf8 \strokec8 releaseLock\cf4 \strokec4 ();\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 createJsonResponse\cf4 \strokec4 (\cf8 \strokec8 response\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // \uc0\u26032 \u22686  Prompt \u30340 \u20989 \u24335 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 addPrompt\cf4 \strokec4 (\cf8 \strokec8 data\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4  = \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getLastColumn\cf4 \strokec4 ()).\cf8 \strokec8 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 idColIndex\cf4 \strokec4  = \cf8 \strokec8 headers\cf4 \strokec4 .\cf8 \strokec8 indexOf\cf4 \strokec4 (\cf7 \strokec7 'id'\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf8 \strokec8 idColIndex\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf7 \strokec7 "\uc0\u24037 \u20316 \u34920 \u20013 \u25214 \u19981 \u21040  'id' \u27396 \u20301 \u27161 \u38988 \u12290 "\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 lastRow\cf4 \strokec4  = \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getLastRow\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 lastId\cf4 \strokec4  = \cf8 \strokec8 lastRow\cf4 \strokec4  > \cf9 \strokec9 1\cf4 \strokec4  ? \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getRange\cf4 \strokec4 (\cf8 \strokec8 lastRow\cf4 \strokec4 , \cf8 \strokec8 idColIndex\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf8 \strokec8 getValue\cf4 \strokec4 () : \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 newId\cf4 \strokec4  = (\cf8 \strokec8 parseInt\cf4 \strokec4 (\cf8 \strokec8 lastId\cf4 \strokec4 ) || \cf9 \strokec9 0\cf4 \strokec4 ) + \cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 newRowData\cf4 \strokec4  = \cf8 \strokec8 headers\cf4 \strokec4 .\cf8 \strokec8 map\cf4 \strokec4 (\cf8 \strokec8 header\cf4 \strokec4  => \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf8 \strokec8 header\cf4 \strokec4  === \cf7 \strokec7 'id'\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 newId\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf8 \strokec8 header\cf4 \strokec4  === \cf7 \strokec7 'copyCount'\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4 [\cf8 \strokec8 header\cf4 \strokec4 ] || \cf7 \strokec7 ""\cf4 \strokec4 ;\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 appendRow\cf4 \strokec4 (\cf8 \strokec8 newRowData\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 newPromptData\cf4 \strokec4  = \{\};\cb1 \
\cb3     \cf8 \strokec8 headers\cf4 \strokec4 .\cf8 \strokec8 forEach\cf4 \strokec4 ((\cf8 \strokec8 header\cf4 \strokec4 , \cf8 \strokec8 index\cf4 \strokec4 ) => \{\cb1 \
\cb3       \cf8 \strokec8 newPromptData\cf4 \strokec4 [\cf8 \strokec8 header\cf4 \strokec4 ] = \cf8 \strokec8 newRowData\cf4 \strokec4 [\cf8 \strokec8 index\cf4 \strokec4 ];\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \{ \cf8 \strokec8 status\cf4 \strokec4 : \cf7 \strokec7 'success'\cf4 \strokec4 , \cf8 \strokec8 message\cf4 \strokec4 : \cf7 \strokec7 'Prompt \uc0\u26032 \u22686 \u25104 \u21151 '\cf4 \strokec4 , \cf8 \strokec8 newData\cf4 \strokec4 : \cf8 \strokec8 newPromptData\cf4 \strokec4  \};\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // \uc0\u26356 \u26032 \u35079 \u35069 \u27425 \u25976 \u30340 \u20989 \u24335 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 incrementCopyCount\cf4 \strokec4 (\cf8 \strokec8 id\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf8 \strokec8 id\cf4 \strokec4 ) \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf7 \strokec7 "\uc0\u32570 \u23569  'id' \u21443 \u25976 \u12290 "\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 data\cf4 \strokec4  = \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getDataRange\cf4 \strokec4 ().\cf8 \strokec8 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 headers\cf4 \strokec4  = \cf8 \strokec8 data\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 idColumnIndex\cf4 \strokec4  = \cf8 \strokec8 headers\cf4 \strokec4 .\cf8 \strokec8 indexOf\cf4 \strokec4 (\cf7 \strokec7 'id'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 countColumnIndex\cf4 \strokec4  = \cf8 \strokec8 headers\cf4 \strokec4 .\cf8 \strokec8 indexOf\cf4 \strokec4 (\cf7 \strokec7 'copyCount'\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf8 \strokec8 idColumnIndex\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cf8 \strokec8 countColumnIndex\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf7 \strokec7 "\uc0\u25214 \u19981 \u21040  'id' \u25110  'copyCount' \u27396 \u20301 \u12290 "\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf8 \strokec8 i\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf8 \strokec8 i\cf4 \strokec4  < \cf8 \strokec8 data\cf4 \strokec4 .\cf8 \strokec8 length\cf4 \strokec4 ; \cf8 \strokec8 i\cf4 \strokec4 ++) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf8 \strokec8 data\cf4 \strokec4 [\cf8 \strokec8 i\cf4 \strokec4 ][\cf8 \strokec8 idColumnIndex\cf4 \strokec4 ] == \cf8 \strokec8 id\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 rowIndex\cf4 \strokec4  = \cf8 \strokec8 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 cell\cf4 \strokec4  = \cf8 \strokec8 sheet\cf4 \strokec4 .\cf8 \strokec8 getRange\cf4 \strokec4 (\cf8 \strokec8 rowIndex\cf4 \strokec4 , \cf8 \strokec8 countColumnIndex\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3             \cf5 \strokec5 const\cf4 \strokec4  \cf8 \strokec8 currentCount\cf4 \strokec4  = \cf8 \strokec8 parseInt\cf4 \strokec4 (\cf8 \strokec8 cell\cf4 \strokec4 .\cf8 \strokec8 getValue\cf4 \strokec4 ()) || \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3             \cf8 \strokec8 cell\cf4 \strokec4 .\cf8 \strokec8 setValue\cf4 \strokec4 (\cf8 \strokec8 currentCount\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3             \cf5 \strokec5 return\cf4 \strokec4  \{ \cf8 \strokec8 status\cf4 \strokec4 : \cf7 \strokec7 'success'\cf4 \strokec4 , \cf8 \strokec8 newCount\cf4 \strokec4 : \cf8 \strokec8 currentCount\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4  \};\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \{ \cf8 \strokec8 status\cf4 \strokec4 : \cf7 \strokec7 'error'\cf4 \strokec4 , \cf8 \strokec8 message\cf4 \strokec4 : \cf7 \strokec7 `\uc0\u25214 \u19981 \u21040  ID \u28858  \cf4 \strokec4 $\{\cf8 \strokec8 id\cf4 \strokec4 \}\cf7 \strokec7  \uc0\u30340  Prompt\u12290 `\cf4 \strokec4  \};\cb1 \
\cb3 \}\cb1 \
\
}